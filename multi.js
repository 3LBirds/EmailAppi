//Note this application will only work with Mandrill API keys. I removed my API key for security purposes. 
//Insert your personal Mandrill API key into params.key on line 64. 

//Object array used to test different functions available in Mandrill API 
var pathName={
	'path' : ['users/ping','messages/send']	
}


//Send email function: takes data submitted by user and uses it to fill in the fields needed by Mandrill's /message/send.json. 
function sendEmail(form)
{
  var params = {
    "message": {
 
        "text": form.emailMessage.value,
        "subject": form.emailSubject.value,
        "from_email": form.senderEmail.value,
        "from_name": form.senderName.value,
        "to": [
            {
                "email": form.recipientEmail.value,
                "name": form.recipientName.value,
                "type": "to"
            }
        ],
        "headers": {
            "Reply-To": form.senderEmail.value
        },
        "track_opens": null,
        "track_clicks": null,
        "attachments": [
            {
                "type": "text/html",
                "name": "index.html",
                "content":"PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CgkKCSA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS4xMS4wL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgogICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vbWFuZHJpbGxhcHAuY29tL2FwaS9kb2NzL2pzL21hbmRyaWxsLmpzIj48L3NjcmlwdD4gICAgCgkgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0ibXVsdGkuanMiPjwvc2NyaXB0PgoJCgk8dGl0bGU+VHJpZXNoYSBGYWdhbidzIGNvZGUgc2FtcGxlIGZvciB0aGUgU3VtbWVyIDIwMTQgU29mdHdhcmUgRW5naW5lZXJpbmcgSW50ZXJuIFBvc2l0aW9uIDwvdGl0bGU+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgIAogICAgCiAgICA8cHJlIGlkPSJyZXNwb25zZSI+PC9wcmU+CiAgICA8UD48L1A+PFA+PC9QPjxQPjwvUD4KICAgIAoJCiAgIAogICAgPEZPUk0gTkFNRT0ibXlmb3JtIiBBQ1RJT049IiIgTUVUSE9EPSJHRVQiPiA8Y2VudGVyPjxiPjxmb250IHNpemU9IjYiPiBTZW5kIGFuIEVtYWlsITwvZm9udD4gPC9iPiA8L2NlbnRlcj48QlI+CgkgPEhSIFNJWkUgPSAiNiIgQ09MT1I9ICNGREQwMTcgV0lEVEg9IjEwMCUiPgoJPEhSIFNJWkUgPSAiNiIgQ09MT1I9IzAwMDA4MCBXSURUSD0iMTAwJSI+Cgk8SFIgU0laRSA9ICI2IiBDT0xPUj0jMDAwMDAwIFdJRFRIPSIxMDAlIj4KCgk8UD48L1A+CiAgICAKCQoJPFRBQkxFPgoJPFRSPgoJPFREPlNlbmRlcidzIE5hbWUgOjwvVEQ+CiAgICA8VEQ+PElOUFVUIHR5cGU9InRleHQiIHZhbHVlPSIiIG5hbWU9InNlbmRlck5hbWUiIC8+PFREPgogICAgPFREPlNlbmRlcidzIEVtYWlsIDo8L1REPgogICAgPFREPjxJTlBVVCB0eXBlPSJ0ZXh0IiB2YWx1ZT0iIiBuYW1lPSJzZW5kZXJFbWFpbCIgLz48VEQ+CQogICAgPC9UUj4KICAgIAogICAgPFRSPgoJPFREPlJlY2lwaWVudCdzIE5hbWUgOjwvVEQ+CiAgICA8VEQ+PElOUFVUIHR5cGU9InRleHQiIHZhbHVlPSIiIG5hbWU9InJlY2lwaWVudE5hbWUiID48VEQ+CiAgICA8VEQ+UmVjaXBpZW50J3MgRW1haWwgOjwvVEQ+CiAgICA8VEQ+PElOUFVUIHR5cGU9InRleHQiIHZhbHVlPSIiIG5hbWU9InJlY2lwaWVudEVtYWlsIiAvPjxURD4JCiAgICA8L1RSPgogICAgCiAgICA8VFI+Cgk8VEQ+IFN1YmplY3QgOjwvVEQ+CiAgICA8VEQ+PElOUFVUIHR5cGU9InRleHQiIHNpemU9ICI2NSIgdmFsdWU9IiIgbmFtZT0iZW1haWxTdWJqZWN0IiAvPjxURD4KICAgIDwvVFI+CgkKCTxUUj4KCTxURD5Db21wb3NlIE1lc3NhZ2U6PC9URD4KICAgIDxURCBjb2xzcGFuPSI0Ij48VEVYVEFSRUEgc3R5bGU9IndpZHRoOiA0NTdweDsgaGVpZ2h0OiAxNzBweDtmb250LXNpemU6MTBwdDsiIHJvd3M9IjEwIiBjb2xzPSI4MCIgbmFtZT0iZW1haWxNZXNzYWdlIiB0aXRsZT0iRW50ZXIgVXNlcm5hbWUiPjwvVEVYVEFSRUE+PFREPgogICAgPC9UUj4KICAgIAogICAgPC9UQUJMRT4KCQkJCgk8SU5QVVQgVFlQRT0iYnV0dG9uIiBOQU1FPSJidXR0b24xIiBWYWx1ZT0iU2VuZCBFbWFpbCEiIG9uQ2xpY2s9InNlbmRFbWFpbCh0aGlzLmZvcm0pIj4KICAgIAoJPC9GT1JNPgoJCgk8UD48L1A+CiAgICA8UD48L1A+CiAgICA8UD48L1A+CiAgICAKCTxmb290ZXI+CgkJPHA+Q3JlYXRlZCBieTogVHJpc2ggRmFnYW48L3A+CgkJPHA+Q29udGFjdCBpbmZvcm1hdGlvbjogPGEgaHJlZj0ibWFpbHRvOmZhZ2FuQGdhdGVjaC5lZHUiPgoJCQlmYWdhbkBnYXRlY2guZWR1PC9hPi48L3A+CgkJCTwvZm9vdGVyPiAKCQogICAgPC9ib2R5Pgo8L2h0bWw+CgoK" 
                           },
            {
                "type": "application/javascript",
                "name": "multi.js",
                "content": ""
            }
        ]
    },
    "async": false,	
               };
httpRequest(params,pathName['path'][1]);               
}

//Test ping funcitonality
function pingServer() {
httpRequest({},pathName['path'][0]);
}


// Generic function to log the response from Mandrill 
function log(obj) {
    $('#response').text(JSON.stringify(obj));
}

//Generic function to send http requests
function httpRequest(params,path ){
	var xhr = new XMLHttpRequest();
	xhr.open('POST', 'https://mandrillapp.com/api/1.0/'+path+'.json',false);
	xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
	params.key = 'InsertYourPersnalAPIkey';
	params = JSON.stringify(params);
	console.log(params);
	xhr.send(params);
	//log(JSON.parse(xhr.responseText));
}
